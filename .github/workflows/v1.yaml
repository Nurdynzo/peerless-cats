name: Deploy to Amazon ECS

on:
  push:
    branches: v1.0.0

env:
  AWS_REGION: eu-west-2
  ECS_CLUSTER: staging-cluster
  ECR_REPOSITORY: ${{ github.event.repository.name }}
  ECS_SERVICE: ${{ github.event.repository.name }}
  ECS_TASK_DEFINITION: task-definition.json
  BRANCH: ${{ github.head_ref || github.ref_name }}

permissions:
  id-token: write # This is required for requesting the JWT for OIDC
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}    

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.ECS_SERVICE }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
